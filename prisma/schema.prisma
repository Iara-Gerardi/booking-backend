generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum ReservationStatus {
  PENDING // Reservation created but not yet confirmed
  CONFIRMED // Reservation finalized and secured
  CHECKED_IN // Guest has checked in
  CHECKED_OUT // Guest has checked out
  CANCELLED // Reservation was cancelled
  NO_SHOW // Guest did not arrive by check-in date
  EXPIRED // Reservation expired before confirmation
  REJECTED // Host or system rejected the reservation
  IN_PROGRESS // Stay is ongoing but not yet finished
  COMPLETED // Reservation fully completed
}

model Guest {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  name        String
  lastname    String
  phoneNumber String?
  address     String
  Reservation Reservation[]
  locationID  Int?          @unique() // Foreign key for Location
  location    Location?     @relation(fields: [locationID], references: [id]) // One-to-one with Location

  @@index([email])
}

// Info such as images and availability will be sourced from a Headless CMS and/or google calendar
// calendar link and description will be sourced from CMS
model Property {
  id        Int    @id @default(autoincrement())
  name      String @unique
  maxGuests Int

  locationID  Int           @unique()
  location    Location      @relation(fields: [locationID], references: [id])
  Reservation Reservation[]
}

//Check in and check out dates will be sourced from CMS
model Reservation {
  id              Int      @id @default(autoincrement())
  paymentDeadline DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  notes           String?

  guestID    Int
  propertyID Int
  guest      Guest     @relation(fields: [guestID], references: [id])
  property   Property  @relation(fields: [propertyID], references: [id])
  payments   Payment[]

  @@index([guestID, propertyID])
}

model Location {
  id         Int       @id @default(autoincrement())
  address    String
  city       String
  state      String
  country    String
  postalCode String
  guestID    Int?      @unique()
  propertyID Int?      @unique()
  Guest      Guest?
  Property   Property?
}

model Payment {
  id            Int           @id @default(autoincrement())
  reservationID Int
  status        PaymentStatus
  amount        Float
  currency      String
  method        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  reservation   Reservation   @relation(fields: [reservationID], references: [id])

  @@index([reservationID])
}
